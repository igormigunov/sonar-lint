[{"filePath":"/Users/igormigunov/setupSonarLint/.eslintrc.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/igormigunov/setupSonarLint/failure2.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'doIt' is not defined.","line":4,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":5},{"ruleId":"no-unused-vars","severity":2,"message":"'doIt2' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":8,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":8,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":10,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":10,"endColumn":18},{"ruleId":"max-depth","severity":2,"message":"Blocks are nested too deeply (3). Maximum allowed is 2.","line":11,"column":7,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":13,"endColumn":8},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":12,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":12,"endColumn":20}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const a = 2;\nconst b = 3;\n\ndoIt();\n\nfunction doIt2 () {\n  if (a === 2) {\n    console.log('a is 2');\n    if (b === 3) {\n      console.log('b is 3');\n      if (a === 2) {\n        console.log('a is 2');\n      }\n    }\n  }\n}\n\nfunction sum (x, y) {\n  return x + y;\n}\n\nsum(a, b);\n","usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/igormigunov/setupSonarLint/failure_2.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'doIt' is not defined.","line":4,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":5},{"ruleId":"no-unused-vars","severity":2,"message":"'doIt2' is defined but never used.","line":6,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":8,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":8,"endColumn":16},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":10,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":10,"endColumn":18},{"ruleId":"max-depth","severity":2,"message":"Blocks are nested too deeply (3). Maximum allowed is 2.","line":11,"column":7,"nodeType":"IfStatement","messageId":"tooDeeply","endLine":13,"endColumn":8},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":12,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":12,"endColumn":20}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const a = 2;\nconst b = 3;\n\ndoIt();\n\nfunction doIt2 () {\n  if (a === 2) {\n    console.log('a is 2');\n    if (b === 3) {\n      console.log('b is 3');\n      if (a === 2) {\n        console.log('a is 2');\n      }\n    }\n  }\n}\n\nfunction sum (x, y) {\n  return x + y;\n}\n\nsum(a, b);\n","usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/Users/igormigunov/setupSonarLint/sonarqube_formatter.js","messages":[{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":1,"column":18,"nodeType":"FunctionExpression","messageId":"unnamed","endLine":1,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = function (results) {\n  const summary = { issues: [] };\n  results.forEach((result) => {\n    result.messages.forEach((msg) => {\n      const logMessage = {\n        engineId: 'eslint',\n        ruleId: msg.ruleId,\n        primaryLocation: {\n          message: msg.message,\n          filePath: result.filePath,\n          textRange: {\n            startLine: msg.line,\n            endLine: msg.endLine,\n            endColumn: msg.endColumn,\n          },\n        },\n      };\n\n      // The log message type and severity is up to you but you need to take in consideration SonarQube properties\n      if (msg.severity === 1) {\n        logMessage.type = 'CODE_SMELL';\n        logMessage.severity = 'INFO';\n      }\n      if (msg.severity === 2) {\n        logMessage.type = 'BUG';\n        logMessage.severity = 'MAJOR';\n      }\n      summary.issues.push(logMessage);\n    });\n  });\n  return JSON.stringify(summary);\n};\n","usedDeprecatedRules":[{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]}]