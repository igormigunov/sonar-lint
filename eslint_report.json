[
  {
    "filePath": "/Users/igormigunov/setupSonarLint/.eslintrc.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/igormigunov/setupSonarLint/failure2.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  },
  {
    "filePath": "/Users/igormigunov/setupSonarLint/megaLogic.js",
    "messages": [
      {
        "ruleId": "no-loops/no-loops",
        "severity": 2,
        "message": "loops are not allowed",
        "line": 18,
        "column": 3,
        "nodeType": "ForOfStatement",
        "endLine": 20,
        "endColumn": 4
      },
      {
        "ruleId": "keyword-spacing",
        "severity": 2,
        "message": "Expected space(s) after \"for\".",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "expectedAfter",
        "endLine": 18,
        "endColumn": 6,
        "fix": {
          "range": [
            402,
            402
          ],
          "text": " "
        }
      },
      {
        "ruleId": "no-await-in-loop",
        "severity": 2,
        "message": "Unexpected `await` inside a loop.",
        "line": 19,
        "column": 5,
        "nodeType": "AwaitExpression",
        "messageId": "unexpectedAwait",
        "endLine": 19,
        "endColumn": 26
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "const f1 = () => {\n  console.log('f1');\n};\n\nconst f2 = () => [4, 5, 6];\n\nconst getDbValues = async (v = []) => Promise.resolve([...v, 1, 2, 3]);\nconst getDbValues2 = async (v = []) => Promise.resolve([...v]);\nconst getDbValues3 = async (v = []) => Promise.resolve([...v]);\n\nconst f3 = async () => {\n  f1();\n  const d = f2();\n  await getDbValues(d);\n  for (const i of d) {\n    getDbValues2(i);\n  }\n  for(const i of d) {\n    await getDbValues2(i);\n  }\n  // await getDbValues3(d);\n};\n\nf3();\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "lines-around-directive",
        "replacedBy": [
          "padding-line-between-statements"
        ]
      },
      {
        "ruleId": "no-spaced-func",
        "replacedBy": [
          "func-call-spacing"
        ]
      },
      {
        "ruleId": "global-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-buffer-constructor",
        "replacedBy": []
      },
      {
        "ruleId": "no-new-require",
        "replacedBy": []
      },
      {
        "ruleId": "no-path-concat",
        "replacedBy": []
      }
    ]
  }
]
